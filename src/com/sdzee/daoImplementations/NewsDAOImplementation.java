package com.sdzee.daoImplementations;

import static com.sdzee.dao.DAOUtilitarian.initialisationPreparedRequest;
import static com.sdzee.dao.DAOUtilitarian.silentClose;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.sdzee.beans.News;
import com.sdzee.dao.DAOException;
import com.sdzee.dao.DAOFactory;
import com.sdzee.daoInterfaces.NewsDAOInterface;

public class NewsDAOImplementation implements NewsDAOInterface {
	
	private DAOFactory daoFactory;
	
	private static final String SQL_LAST_ID = "SELECT id FROM news";
	private static final String SQL_CREATE_NEWS = "INSERT INTO news (title, image, content, date) VALUES (?,?,?,?)";
	private static final String SQL_UPDATE_NEWS = "UPDATE news SET title = ?, content = ?, image = ?, lastEdit = NOW() WHERE id = ?";
	
	private static final String ID_FIELD = "id";
	
    public NewsDAOImplementation( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

	@Override
	public void createNews(News news) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;
        
        try {
        	connexion = daoFactory.getConnexion();
        	
        	String title = news.getTitle();
        	String content = news.getContent();
        	String image = news.getImage();
        	String date = news.getDate();
        	
            preparedStatement = initialisationPreparedRequest(connexion, SQL_CREATE_NEWS, true, title, image, content, date);
            int statut = preparedStatement.executeUpdate();
            
            if ( statut == 0 ) {
                throw new DAOException( "Échec de la création de l'utilisateur, aucune ligne ajoutée dans la table." );
            }
            
            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if ( autoGeneratedValues.next() ) {
                news.setId( autoGeneratedValues.getInt( 1 ) );
            } else {
                throw new DAOException( "Échec de la création de l'utilisateur en base, aucun ID auto-généré retourné." );
            }
        } catch (SQLException e){
        	throw new DAOException( e );
        } finally {
            silentClose( autoGeneratedValues, preparedStatement, connexion );
        }
		
	}

	@Override
	public void updateNews(News news) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        
        int id = news.getId();
        String title = news.getTitle();
        String content = news.getContent();
        String image = news.getImage();
        
        try {
        	connexion = daoFactory.getConnexion();
            preparedStatement = initialisationPreparedRequest( connexion, SQL_UPDATE_NEWS, false, title, content, image, id);
            int statut = preparedStatement.executeUpdate();
            
            if ( statut == 0 ) {
                throw new DAOException( "Échec de la mise à jour de la news, aucune ligne mise à jour dans la table." );
            }
            
        } catch (SQLException e) {
        	throw new DAOException("La table News n'a pas pu être mise à jour.", e);
		} finally {
			silentClose(preparedStatement, connexion);
		}
		
	}

	@Override
	public News getNews(int id) throws DAOException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void deleteNews(int id) throws DAOException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean exists(int id) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        
		boolean exists = false;
		
		try {
			connexion = daoFactory.getConnexion();
			preparedStatement = initialisationPreparedRequest(connexion,SQL_LAST_ID, false);
			resultSet = preparedStatement.executeQuery();
			
			while (resultSet.next()) {
				int currentId = resultSet.getInt(ID_FIELD);
				if(currentId == id) {
					exists = true;
				}
			}
			
		} catch (SQLException e) {
			throw new DAOException("La news n'existe pas.", e);
		} finally {
			silentClose(resultSet, preparedStatement, connexion);
		}
		
		return exists;
	}

	@Override
	public int lastId() throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        
		int id = -1;
		
		try {
			connexion = daoFactory.getConnexion();
			preparedStatement = initialisationPreparedRequest(connexion,SQL_LAST_ID, false);
			resultSet = preparedStatement.executeQuery();
			
			while (resultSet.next()) {
				int currentId = resultSet.getInt(ID_FIELD);
				if(currentId > id) {
					id = currentId;
				}
			}
			
		} catch (SQLException e) {
			throw new DAOException("Problème lors de la récupération du last ID", e);
		} finally {
			silentClose(resultSet, preparedStatement, connexion);
		}
		if (id < 0) {
			id = 0;
		}
		return id;
	}
	

}
