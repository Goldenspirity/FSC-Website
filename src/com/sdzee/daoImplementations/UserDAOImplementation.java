package com.sdzee.daoImplementations;

import static com.sdzee.dao.DAOUtilitarian.initialisationPreparedRequest;
import static com.sdzee.dao.DAOUtilitarian.silentClose;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.sdzee.beans.User;
import com.sdzee.dao.DAOException;
import com.sdzee.dao.DAOFactory;
import com.sdzee.daoInterfaces.UserDAOInterface;

public class UserDAOImplementation implements UserDAOInterface {
	
    private DAOFactory          daoFactory;
    
	private static final String ID_FIELD = "id";
	private static final String EMAIL_FIELD = "email";
	private static final String PASSWORD_FIELD = "password";
	private static final String NAME_FIELD = "name";
	private static final String DATE_FIELD = "registerDate";
	private static final String ROLE_FIELD = "role";
    
	private static final String SQL_SELECT_ALL_USERS = "SELECT id, email, name, password, registerDate, role FROM users";
    private static final String SQL_SELECT_BY_EMAIL = "SELECT id, email, name, password, registerDate, role FROM users WHERE email = ?";
    private static final String SQL_SELECT_BY_NAME = "SELECT id, email, name, password, registerDate, role FROM users WHERE name = ?";
    private static final String SQL_INSERT = "INSERT INTO users (email, password, name, registerDate, role) VALUES (?, ?, ?, NOW(), 'member')";
    private static final String SQL_UPDATE_PASSWORD = "UPDATE users SET password = ? WHERE name = ?";
    private static final String SQL_UPDATE_EMAIL = "UPDATE users SET email = ? WHERE name = ?";
    private static final String SQL_UPDATE_ROLE = "UPDATE users SET role = ? WHERE name = ?";
    
    
    public UserDAOImplementation( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

	@Override
	public User findByEmail(String email) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        User user = null;

        try {
            connexion = daoFactory.getConnexion();
            preparedStatement = initialisationPreparedRequest( connexion, SQL_SELECT_BY_EMAIL, false, email );
            resultSet = preparedStatement.executeQuery();
            
            if ( resultSet.next() ) {
                user = map( resultSet );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( resultSet, preparedStatement, connexion );
        }

        return user;
		
	}
	
	@Override
	public User findByName(String name) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        User user = null;

        try {
            connexion = daoFactory.getConnexion();
            preparedStatement = initialisationPreparedRequest( connexion, SQL_SELECT_BY_NAME, false, name );
            resultSet = preparedStatement.executeQuery();
            
            if ( resultSet.next() ) {
                user = map( resultSet );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( resultSet, preparedStatement, connexion );
        }

        return user;
		
	}

	@Override
	public void create(User user) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            connexion = daoFactory.getConnexion();
            preparedStatement = initialisationPreparedRequest( connexion, SQL_INSERT, true, user.getEmail(), user.getPassword(), user.getName() );
            int statut = preparedStatement.executeUpdate();
            
            if ( statut == 0 ) {
                throw new DAOException( "Échec de la création de l'utilisateur, aucune ligne ajoutée dans la table." );
            }
            
            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if ( autoGeneratedValues.next() ) {
                user.setId( autoGeneratedValues.getLong( 1 ) );
            } else {
                throw new DAOException( "Échec de la création de l'utilisateur en base, aucun ID auto-généré retourné." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( autoGeneratedValues, preparedStatement, connexion );
        }
	}
	
	@Override
	public void updatePassword(User user) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        
        try {
        	connexion = daoFactory.getConnexion();
            preparedStatement = initialisationPreparedRequest( connexion, SQL_UPDATE_PASSWORD, false, user.getPassword(), user.getName() );
            int statut = preparedStatement.executeUpdate();
            
            if ( statut == 0 ) {
                throw new DAOException( "Échec de la création de l'utilisateur, aucune ligne mise à jour dans la table." );
            }
            
        } catch (SQLException e) {
        	throw new DAOException ( e );
        } finally {
        	silentClose(preparedStatement, connexion);
        }
		
	}

	@Override
	public void updateEmail(User user) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        
        try {
        	connexion = daoFactory.getConnexion();
            preparedStatement = initialisationPreparedRequest( connexion, SQL_UPDATE_EMAIL, false, user.getEmail(), user.getName() );
            int statut = preparedStatement.executeUpdate();
            
            if ( statut == 0 ) {
                throw new DAOException( "Échec de la création de l'utilisateur, aucune ligne mise à jour dans la table." );
            }
            
        } catch (SQLException e) {
        	throw new DAOException ( e );
        } finally {
        	silentClose(preparedStatement, connexion);
        }
		
	}
	
	@Override
	public void updateRole(User user) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        
        try {
        	connexion = daoFactory.getConnexion();
            preparedStatement = initialisationPreparedRequest( connexion, SQL_UPDATE_ROLE, false, user.getRole(), user.getName() );
            int statut = preparedStatement.executeUpdate();
            
            if ( statut == 0 ) {
                throw new DAOException( "Échec de la création de l'utilisateur, aucune ligne mise à jour dans la table." );
            }
            
        } catch (SQLException e) {
        	throw new DAOException ( e );
        } finally {
        	silentClose(preparedStatement, connexion);
        }
		
	}
	
	@Override
	public ArrayList<User> getAllUsers() throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        ArrayList<User> users = new ArrayList<User>();

        try {
            connexion = daoFactory.getConnexion();
            preparedStatement = initialisationPreparedRequest( connexion, SQL_SELECT_ALL_USERS, false);
            resultSet = preparedStatement.executeQuery();
            
            while ( resultSet.next() ) {
                User user = map( resultSet );
                users.add(user);
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( resultSet, preparedStatement, connexion );
        }

        return users;
	}
	
    private static User map( ResultSet resultSet ) throws SQLException {
    	User user = new User();
    	user.setId( resultSet.getLong( ID_FIELD ) );
    	user.setEmail( resultSet.getString( EMAIL_FIELD ) );
    	user.setPassword((byte[]) resultSet.getObject( PASSWORD_FIELD ) );
    	user.setName( resultSet.getString( NAME_FIELD ) );
    	user.setRegisterDate( resultSet.getTimestamp( DATE_FIELD ) );
    	user.setRole(resultSet.getString( ROLE_FIELD ));
        return user;
    }
}
